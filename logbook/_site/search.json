[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Log Book",
    "section": "",
    "text": "View live example logbook"
  },
  {
    "objectID": "index.html#directory-structure",
    "href": "index.html#directory-structure",
    "title": "Reproducible Log Book",
    "section": "Directory Structure",
    "text": "Directory Structure\nHere is the example directory structure. Note how the folder structure in logbook matches the folder structure in code. This handled by the render_file() function.\n.\n├── README.md\n├── code\n│   ├── analysis\n│   │   └── main_analysis.R\n│   ├── cleaning\n│   │   └── clean_census.R\n│   └── main.R\n└── logbook\n    ├── analysis\n    │   └── main_analysis\n    │       ├── index.md\n    │       ├── index_files\n    │       │   └── ...\n    │       └── readme.md\n    ├── cleaning\n    │   └── clean_census\n    │       ├── index.md\n    │       └── readme.md\n    ├── render_file.R\n    ├── _quarto.yml\n    ├── copy_readme.R\n    └── index.md\nAddtional files: - logbook/render_file.R is the script that runs a script and logs it. More details below. - logbook/_quarto.yml is the quarto configuration file. You don’t need to edit this. - README.md is the “front page” to your project. This shows up when you open the github repository. - logbook/copy_readme.R gets run every time you use quarto render on the logbook to keep index.md up to date."
  },
  {
    "objectID": "index.html#how-render_file-works",
    "href": "index.html#how-render_file-works",
    "title": "Reproducible Log Book",
    "section": "How render_file() works",
    "text": "How render_file() works\nThe render_file() is basically a light wrapper around quarto::quarto_render(). What it does is as follows:\n\nIt takes a .R file (.py/.jl soon!), converts it to a .qmd file. See the YAML Frontmatter section for important details.\nIt renders the .qmd file to a index.md and to readme.md in the logbook folder. The index.md is what becomes the html page and the readme.md is what shows up on GitHub. This only requires rendering the script once.\n\nYou can think of the render_file() as wrapping your code in one giant .qmd code chunk:\n``` r\n...\n```\nHowever, you can do anything you can in a .qmd file in a plain script…\n\nCode chunks\nThere is much more customization power possible using the # %% syntax. See for example, code/analysis/main_analysis.R. This syntax is used in .jl/.py/.R files to denote code chunks and has editor support in VSCode. I love it because I can group lines of code that I want to run together in a chunk and in all three languages I can run them all together with one keyboard shortcut (I set up cmd + shift + enter).\nWhen using render_file() (or quarto::quarto_render() directly), the # %% is converted to it’s own code cell and you can pass options to it just like in .qmd files, e.g.:\n# %% Chunk label\n#| echo: false\n#| warning: false\n\n\nAdding markdown into script\nTo insert markdown directly into your document (so that you can comment on your code):\n\nIn .R, use roxygen style comments like this:\n\n#' # Header\n#'\n#' Markdown text\n\nIn .py/.jl, use raw string literals like this:\n\n# %% [markdown]\n\"\"\"\n# Header\n\nMarkdown text\n\"\"\"\n\n\nYAML Frontmatter\nThe only modification to your file is you need to include yaml frontmatter at the top of your script. Note, you don’t need to pass format since render_file handles this.\nYou can add yaml frontmatter as a comment markdown like above.\n\nIn .R:\n\n#' ---\n#' title: ''\n#' ---\n\nIn .py/.jl:\n\n# %% [markdown]\n\"\"\"\n---\ntitle: ''\n---\n\"\"\"\n\n\nDeploying logbook\nThe logbook can be viewed on Github automatically just by clicking into folders (via the README.md file). However, deploying to a website requires some more setup. Since logbook is just a quarto project, deployment is just deploying a quarto project (from a non-root directory): https://quarto.org/docs/output-formats/html-publishing.html.\n\n\nTODOS\n\nAutomatically add YAML frontmatter with title: 'script_name' if yaml is missing.\nAdd support for .py and .jl files.\n\nPRs welcome!"
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Reproducible Log Book",
    "section": "Abstract",
    "text": "Abstract\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Reproducible Log Book",
    "section": "Citation",
    "text": "Citation\n@techreport{key,\n  title={Paper Title},\n  author={Butts, Kyle},\n  year={20XX}\n}"
  },
  {
    "objectID": "analysis/main_analysis/index.html",
    "href": "analysis/main_analysis/index.html",
    "title": "Main analysis script",
    "section": "",
    "text": "This is an example script that will be run by render_file and logged in the logbook.\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, warning, important, tip, and caution.\n\n\n\nlibrary(tidyverse, warn.conflicts = FALSE)\nlibrary(fixest)\n\n\n1 + 1\n\n[1] 2\n\n\n\nplot(mtcars$mpg, mtcars$hp)\n\n\n\n\n\n\n\n\n\nknitr::kable(\n  mtcars[1:5, ], \n  caption = \"A knitr kable.\"\n)\n\n\nA knitr kable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\n\n\nest = feols(mpg ~ hp | cyl, mtcars)\n\n\nesttable(est)\n\n                             est\nDependent Var.:              mpg\n                                \nhp              -0.0240 (0.0153)\nFixed-Effects:  ----------------\ncyl                          Yes\n_______________ ________________\nS.E.: Clustered          by: cyl\nObservations                  32\nR2                       0.75386\nWithin R2                0.07998\n---\nSignif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1",
    "crumbs": [
      "Analysis",
      "Main analysis script"
    ]
  },
  {
    "objectID": "cleaning/clean_census/index.html",
    "href": "cleaning/clean_census/index.html",
    "title": "Clean Census data",
    "section": "",
    "text": "cat(\"Cleaning data\")\n\nCleaning data",
    "crumbs": [
      "Cleaning",
      "Clean Census data"
    ]
  }
]